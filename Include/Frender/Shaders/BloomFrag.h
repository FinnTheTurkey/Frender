// Auto generated file.
static const char BloomFragSrc[] = "#version 330 core\n\
#define GLSLIFY 1\n\
layout (location = 0) out vec4 FragColor;\n\
\n\
in vec2 tex_coords;\n\
\n\
uniform sampler2D frame;\n\
\n\
uniform bool horizontal;\n\
uniform float weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);\n\
\n\
uniform float gWeights[2] =float [] (\n\
    0.44908,\n\
    0.05092\n\
);\n\
uniform float gOffsets[2] =float [] (\n\
    0.53805,\n\
    2.06278\n\
);\n\
\n\
// https://software.intel.com/content/www/us/en/develop/blogs/an-investigation-of-fast-real-time-gpu-based-image-blur-algorithms.html\n\
// automatically generated by GenerateGaussFunctionCode in GaussianBlur.h\n\
vec3 GaussianBlur( sampler2D tex0, vec2 centreUV, vec2 pixelOffset )\n\
{\n\
    vec3 colOut = vec3( 0, 0, 0 );\n\
\n\
    ////////////////////////////////////////////////;\n\
    // Kernel width 7 x 7\n\
    //\n\
    const int stepCount = 2;\n\
    //\n\
\n\
    ////////////////////////////////////////////////;\n\
\n\
    for( int i = 0; i < stepCount; i++ )\n\
    {\n\
        vec2 texCoordOffset = gOffsets[i] * pixelOffset;\n\
        vec3 col = texture(tex0, centreUV + texCoordOffset).xyz + \n\
                    texture(tex0, centreUV - texCoordOffset).xyz;\n\
        colOut += gWeights[i] * col;\n\
    }\n\
\n\
    return colOut;\n\
}\n\
\n\
void main()\n\
{\n\
    vec2 tex_offset = 1.0 / textureSize(frame, 0); // gets size of single texel\n\
    // vec3 result = texture(frame, tex_coords).rgb; // * weight[0]; // current fragment's contribution\n\
    // if(horizontal)\n\
    // {\n\
    //     for(int i = 1; i < 5; ++i)\n\
    //     {\n\
    //         result += texture(frame, tex_coords + vec2(tex_offset.x * i, 0.0)).rgb * weight[i];\n\
    //         result += texture(frame, tex_coords - vec2(tex_offset.x * i, 0.0)).rgb * weight[i];\n\
    //     }\n\
    // }\n\
    // else\n\
    // {\n\
    //     for(int i = 1; i < 5; ++i)\n\
    //     {\n\
    //         result += texture(frame, tex_coords + vec2(0.0, tex_offset.y * i)).rgb * weight[i];\n\
    //         result += texture(frame, tex_coords - vec2(0.0, tex_offset.y * i)).rgb * weight[i];\n\
    //     }\n\
    // }\n\
\n\
    vec2 txo;\n\
\n\
    if (horizontal)\n\
    {\n\
        txo = vec2(tex_offset.x, 0);\n\
    }\n\
    else\n\
    {\n\
        txo = vec2(0, tex_offset.y);\n\
    }\n\
\n\
    vec3 result = GaussianBlur(frame, tex_coords, txo);\n\
    FragColor = vec4(result, 1.0);\n\
    // FragColor = vec4(0, 1, 0, 1);\n\
}";
